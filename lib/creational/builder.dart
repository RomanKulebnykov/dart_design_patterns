/// Строитель(Builder) — это порождающий паттерн проектирования, который позволяет
/// создавать сложные объекты пошагово. Строитель даёт возможность использовать
/// один и тот же код строительства для получения разных представлений объектов.

///## Применимость ##
///
/// * Когда ваш код должен создавать разные представления какого-то объекта.
/// Например, деревянные и железобетонные дома.
//  Строитель можно применить, если создание нескольких представлений объекта
//  состоит из одинаковых этапов, которые отличаются в деталях.
//  Интерфейс строителей определит все возможные этапы конструирования.
//  Каждому представлению будет соответствовать собственный класс-строитель.
//  А порядок этапов строительства будет задавать класс-директор.

/// * Когда вам нужно собирать сложные составные объекты, например,
/// деревья Компоновщика(Composite).
//  Строитель конструирует объекты пошагово, а не за один проход.
//  Более того, шаги строительства можно выполнять рекурсивно.
//  А без этого не построить древовидную структуру, вроде Компоновщика.
//  Заметьте, что Строитель не позволяет посторонним объектам иметь доступ
//  к конструируемому объекту, пока тот не будет полностью готов.
//  Это предохраняет клиентский код от получения незаконченных «битых» объектов.

abstract class Ingredient {
  final String name;
  Ingredient(this.name);
}

class Onion extends Ingredient {
  Onion(super.name);
}

class BeefPatty extends Ingredient {
  BeefPatty(super.name);
}

class Cheese extends Ingredient {
  Cheese(super.name);
}

class BurgerBuilder {
  late Burger _newBurger;
  BurgerBuilder() {
    _newBurger = Burger([]);
  }

  void addBeefPatty() {
    _newBurger.ingredient.add(BeefPatty('BeefPatty'));
  }

  void addOnion() {
    _newBurger.ingredient.add(Onion('Onion'));
  }

  void addCheese() {
    _newBurger.ingredient.add(Cheese('Cheese'));
  }

  Burger createBurger() {
    return _newBurger;
  }
}

class Burger {
  final List<Ingredient> ingredient;
  Burger(this.ingredient);
}

void application() {
  final burgerBuilder = BurgerBuilder();
  burgerBuilder.addBeefPatty();
  burgerBuilder.addCheese();
  burgerBuilder.addOnion();
  Burger myBurger = burgerBuilder.createBurger();
}

// + Позволяет создавать продукты пошагово.
// + Позволяет использовать один и тот же код для создания различных продуктов.
// + Изолирует сложный код сборки продукта от его основной бизнес-логики.

// - Усложняет код программы из-за введения дополнительных классов.
// - Клиент будет привязан к конкретным классам строителей, так как в интерфейсе
//   директора может не быть метода получения результата.
