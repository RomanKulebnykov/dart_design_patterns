/// Прототип(Prototype) — это порождающий паттерн проектирования, который
/// позволяет копировать объекты, не вдаваясь в подробности их реализации.

///## Применимость ##
///
/// * Когда ваш код не должен зависеть от классов копируемых объектов.
//  Такое часто бывает, если ваш код работает с объектами, поданными извне через
//  какой-то общий интерфейс. Вы не можете привязаться к их классам,
//  даже если бы хотели, поскольку их конкретные классы неизвестны.
//  Паттерн прототип предоставляет клиенту общий интерфейс для работы со всеми
//  прототипами. Клиенту не нужно зависеть от всех классов копируемых объектов,
//  а только от интерфейса клонирования.

/// * Когда вы имеете уйму подклассов, которые отличаются начальными значениями
/// полей. Кто-то мог создать все эти классы, чтобы иметь возможность легко
/// порождать объекты с определённой конфигурацией.
//  Паттерн прототип предлагает использовать набор прототипов, вместо создания
//  подклассов для описания популярных конфигураций объектов.
//  Таким образом, вместо порождения объектов из подклассов, вы будете
//  копировать существующие объекты-прототипы, в которых уже настроено
//  внутреннее состояние. Это позволит избежать взрывного роста количества
//  классов в программе и уменьшить её сложность.

abstract class Shape {
  final int color;
  Shape({required this.color});
  Shape._clone(Shape source) : color = source.color;
  Shape clone();
}

class Rectangle extends Shape {
  final double height;
  final double width;

  Rectangle({
    required this.height,
    required this.width,
    required super.color,
  });

  Rectangle._clone(Rectangle source)
      : height = source.height,
        width = source.width,
        super._clone(source);

  //Copy obj with change(Flutter common)
  Rectangle copyWith({
    double? height,
    double? width,
    int? color,
  }) {
    return Rectangle(
      height: height ?? this.height,
      width: width ?? this.width,
      color: color ?? this.color,
    );
  }

  //Clone obj
  @override
  Shape clone() {
    return Rectangle._clone(this);
  }
}

// + Позволяет клонировать объекты, не привязываясь к их конкретным классам.
// + Меньше повторяющегося кода инициализации объектов.
// + Ускоряет создание объектов.
// + Альтернатива созданию подклассов для конструирования сложных объектов.

// - Сложно клонировать составные объекты, имеющие ссылки на другие объекты.
